#!/bin/bash

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# By default, don't give created files access to anyone but the `acme` user this
# script runs as.
umask 0077

# Each line in the below file has information about a DNS record this script
# created but still needs to delete.
dns_cleanup_path="$BASEDIR/cf_dns_cleanup"

# Deletes a DNS record and removes its information from our DNS cleanup file.
_clean_dns_record() {
	local zone_id="$1" dns_record_name="$2" token_value="$3"

	local dns_record_id
	dns_record_id="$(
		cf api "/zones/$zone_id/dns_records" \
			--url-query "type=TXT" \
			--url-query "name=$dns_record_name" \
			--url-query "content=$token_value" |
		jq -r '.result[0].id'
	)" || exit 1

	# Only try to delete the DNS record if it was found.
	if [[ "$dns_record_id" != "null" ]]; then
		cf api "/zones/$zone_id/dns_records/$dns_record_id" \
			-X DELETE > /dev/null
	fi

	# Get all the DNS record info passed into this function's arguments.
	local dns_record_info="$*"

	# Use a temporary file for writing to our DNS cleanup file to prevent
	# corrupting the original in case of a system failure.
	temp_dns_cleanup_path="$(mktemp)"

	# Now that the DNS record is deleted, remove it from our DNS cleanup
	# file.
	grep -Fvx "$dns_record_info" "$dns_cleanup_path" \
		> "$temp_dns_cleanup_path"

	# Save the DNS cleanup file.
	mv -f "$temp_dns_cleanup_path" "$dns_cleanup_path"
}

# Deletes any DNS records previously created by this script that never got
# cleaned up.
_clean_old_challenges() {
	# Create our DNS cleanup file if it doesn't already exist.
	touch "$dns_cleanup_path"

	# Read each line from our DNS cleanup file, and split each line's words
	# into a Bash array.
	local dns_record_info
	while read -ra dns_record_info; do
		# Pass the words in the array as arguments to our DNS cleanup
		# function.
		_clean_dns_record "${dns_record_info[@]}"
	done < "$dns_cleanup_path"
}

# `dehydrated` runs this before a domain is validated.
deploy_challenge() {
	# These arguments are passed in by `dehydrated`.
	local domain="$1" token_value="$3"

	# Create the `_acme-challenge` DNS record requested by `dehydrated`.

	local zone_id
	zone_id="$(cf zone_id "$domain")" || exit 1

	local dns_record_name="_acme-challenge.$domain"

	local dns_record_comment="This record should be deleted automatically. If it isn't, feel free to delete it."

	local dns_record_data='{"type":"TXT","name":"'"$dns_record_name"'","content":"'"$token_value"'","comment":"'"$dns_record_comment"'"}'

	# Use a temporary file for writing to our DNS cleanup file to prevent
	# corrupting the original in case of a system failure.
	temp_dns_cleanup_path="$(mktemp)"
	cat "$dns_cleanup_path" > "$temp_dns_cleanup_path"

	# Save some information about the DNS record we'll create. That way, for
	# example if the container stops in the middle of the ACME challenge, we
	# don't lose this information, and we can still remove the record.
	echo "$zone_id $dns_record_name $token_value" >> "$temp_dns_cleanup_path"

	# Save the DNS cleanup file.
	mv -f "$temp_dns_cleanup_path" "$dns_cleanup_path"

	cf api "/zones/$zone_id/dns_records" \
		-X POST \
		-H "Content-Type: application/json" \
		--data-raw "$dns_record_data" > /dev/null

	echo "Waiting 20 seconds for DNS records to propagate..."
	sleep 20
}

# `dehydrated` runs this after a domain is validated.
clean_challenge() {
	# These arguments are passed in by `dehydrated`.
	local domain="$1" token_value="$3"

	local zone_id
	zone_id="$(cf zone_id "$domain")" || exit 1

	local dns_record_name="_acme-challenge.$domain"

	_clean_dns_record "$zone_id" "$dns_record_name" "$token_value"
}

# `dehydrated` runs this on each attempt to issue certificates before running
# anything else in this script.
startup_hook() {
	# Delete any DNS records previously created by this script that never
	# got cleaned up.
	_clean_old_challenges
}

case "$1" in
deploy_challenge | clean_challenge | startup_hook)
	"$@"
	;;
esac
