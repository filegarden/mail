#!/bin/bash
# This script uses Bash because it's made for `dehydrated` which uses Bash.

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail
shopt -s inherit_errexit

reset=$'\e[0m'
gray=$'\e[90m'
lblue=$'\e[1;34m'

# Each line in the below file has information about a DNS record this script
# created but still needs to delete.
dns_cleanup_path="$BASEDIR/cf_dns_cleanup"

# Deletes a DNS record and removes its information from our DNS cleanup file.
_clean_dns_record() {
	local zone_id="$1" record_name="$2" token_value="$3"

	local record_id
	record_id="$(
		cf api "/zones/$zone_id/dns_records" \
			--url-query "type=TXT" \
			--url-query "name=$record_name" \
			--url-query "content=$token_value" \
		| jq -r '.result[0].id'
	)"

	# Only try to delete the DNS record if it was found.
	if [[ "$record_id" != "null" ]]; then
		cf api "/zones/$zone_id/dns_records/$record_id" \
			-X DELETE > /dev/null
	fi

	# Use a temporary file for writing to our DNS cleanup file to prevent
	# corrupting the original in case of a failure.
	local temp_dns_cleanup_path
	temp_dns_cleanup_path="$(mktemp -u)"

	# Now that the DNS record is deleted, remove it from our DNS cleanup
	# file. If `grep` returns an error due to finding no matches, instead do
	# nothing.
	grep -Fvxe "$record_name $token_value" -- "$dns_cleanup_path" || : \
		> "$temp_dns_cleanup_path"

	# Save the DNS cleanup file.
	mv -f -- "$temp_dns_cleanup_path" "$dns_cleanup_path"
}

# Deletes any DNS records previously created by this script that never got
# cleaned up. This is useful when, for example, the container is stopped in the
# middle of an ACME challenge, leaving `dehydrated` unable to run the cleanup
# hook, so the ACME DNS records would otherwise stay there forever.
_clean_old_challenges() {
	local zone_id="$1"

	# Create our DNS cleanup file if it doesn't already exist.
	touch -- "$dns_cleanup_path"

	# Read each line from our DNS cleanup file, and split each line's words
	# into a Bash array.
	local record_info
	while read -ra record_info; do
		# Pass the words in the array as arguments to our DNS cleanup
		# function.
		_clean_dns_record "$zone_id" "${record_info[@]}"
	done < "$dns_cleanup_path"
}

# `dehydrated` runs this before a domain is validated.
deploy_challenge() {
	# These arguments are passed in by `dehydrated`.
	local domain="$1" token_value="$3"

	# Create the `_acme-challenge` DNS record requested by `dehydrated`.

	# Get our Cloudflare zone information.
	local zone_json zone_id zone_name
	zone_json="$(cf zone)"
	zone_id="$(jq -r '.id' <<< "$zone_json")"
	zone_name="$(jq -r '.name' <<< "$zone_json")"

	printf '%s\n' "Zone '$zone_name' found."

	# The DNS record Let's Encrypt will read (hence "r") to check for our
	# ACME token.
	local r_record_name="_acme-challenge.$domain"

	# The DNS record we'll write (hence "w") the ACME token to.
	local w_record_name="$r_record_name"

	# Check if the domain being validated (`$domain`) is outside the domain
	# of the zone our token has access to (`$zone_name`).
	if [[ ".$domain" != *".$zone_name" ]]; then
		# Ensure adding the DNS record to the zone will still indirectly
		# (through a CNAME record) apply to the domain being validated.

		w_record_name="$r_record_name.$zone_name"

		printf '%s\n' "The domain '$domain' being validated is outside the zone '$zone_name' your Cloudflare token has access to. Verifying CNAME..."

		# Get the value of the CNAME record (if it exists).
		local cname
		cname="$(
			cf dns query CNAME "$r_record_name" \
			| jq -r '.Answer[0].data'
		)"

		# Check if the CNAME record (if it exists) doesn't point to the
		# name of the DNS record we're creating.
		if [[ "$cname" != "$w_record_name." ]]; then
			cat <<-END >&2
			ERROR: Incorrect CNAME! If you want to use a DNS alias, permanently set the following DNS record for ${lblue}$domain${reset}:

			Type: ${lblue}CNAME${reset}

			Name: ${lblue}$r_record_name${reset}

			Content: ${lblue}$w_record_name${reset}

			Proxy Status (if applicable): ${lblue}DNS only${reset}

			${gray}If you don't want to use a DNS alias, ensure your hostname (in \`compose.override.yaml\`) is under the same domain as the zone your Cloudflare API token (in \`.env\`) has DNS editing permissions for.${reset}
			END
			exit 1
		fi

		printf '%s\n' "CNAME verified."
	fi

	# Use a temporary file for writing to our DNS cleanup file to prevent
	# corrupting the original in case of a failure.
	local temp_dns_cleanup_path
	temp_dns_cleanup_path="$(mktemp -u)"
	cp -- "$dns_cleanup_path" "$temp_dns_cleanup_path"

	# Save some information about the DNS record we'll create. That way, for
	# example if the container stops in the middle of the ACME challenge, we
	# don't lose this information, and we can still remove the record.
	printf '%s\n' "$w_record_name $token_value" >> "$temp_dns_cleanup_path"

	# Save the DNS cleanup file.
	mv -f -- "$temp_dns_cleanup_path" "$dns_cleanup_path"

	# Try requesting the DNS record we would otherwise create to ensure it
	# doesn't already exist. If it doesn't exist, this will be `null`.
	local record_json
	record_json="$(
		cf api "/zones/$zone_id/dns_records" \
			--url-query "type=TXT" \
			--url-query "name=$w_record_name" \
			--url-query "content=$token_value" \
		| jq '.result[0]'
	)"

	# Check if the record already exists.
	if [[ "$record_json" != "null" ]]; then
		printf '%s\n' "DNS record '$w_record_name' with correct content already exists."

		return 0
	fi

	# The record doesn't already exist, so create it.

	printf '%s\n' "Creating DNS record '$w_record_name'..."

	local record_comment="This record should be deleted automatically. If it isn't, feel free to delete it."
	local record_data='{"type":"TXT","name":"'"$w_record_name"'","content":"'"$token_value"'","comment":"'"$record_comment"'"}'

	cf api "/zones/$zone_id/dns_records" \
		-X POST \
		-H "Content-Type: application/json" \
		--data-raw "$record_data" > /dev/null

	# Reset Bash's timer to 0. It will count up from here.
	SECONDS=0

	# Check our DNS this often.
	local dns_sleep_seconds=5

	# Give up checking after this duration.
	local dns_timeout_seconds=1200

	printf '%s\n' "Waiting $dns_sleep_seconds seconds for your DNS to update..."

	# Repeatedly check our DNS until we verify the new record exists.
	while true; do
		sleep "$dns_sleep_seconds"

		# Get a list of all the DNS record data under this record name.
		# Remove quotes because quotes are allowed around parts of a TXT
		# record's data.
		local record_answers
		record_answers="$(
			cf dns query TXT "$w_record_name" \
			| jq -r '.Answer[]?.data' \
			| tr -d '"'
		)"

		# If any of the results match the DNS record we created, we can
		# stop checking for our DNS record.
		if grep -Fqxe "$token_value" <<< "$record_answers"; then
			printf '%s\n' "Updated DNS record found."
			break
		fi

		if [[ "$SECONDS" -gt "$dns_timeout_seconds" ]]; then
			printf '%s\n' "ERROR: Timed out. DNS updates shouldn't take this long, so something is probably wrong." >&2
			exit 1
		fi

		printf '%s\n' "DNS update for record '$w_record_name' not found yet. Waiting $dns_sleep_seconds more seconds..."
	done
}

# `dehydrated` runs this after a domain is validated.
clean_challenge() {
	# These arguments are passed in by `dehydrated`.
	local token_value="$3"

	local zone_id
	zone_id="$(cf zone | jq -r '.id')"

	# Use the token value of the DNS record we're cleaning up to find the
	# record in our DNS cleanup file.
	local record_info
	record_info="$(grep -Fe " $token_value" -- "$dns_cleanup_path")"

	# Split the record info on whitespace into an array so its values can be
	# passed as separate arguments to the below function call.
	read -ra record_info <<< "$record_info"

	_clean_dns_record "$zone_id" "${record_info[@]}"
}

# `dehydrated` runs this on each attempt to issue certificates before running
# anything else in this script.
startup_hook() {
	local zone_id
	zone_id="$(cf zone | jq -r '.id')"

	_clean_old_challenges "$zone_id"
}

case "$1" in
deploy_challenge | clean_challenge | startup_hook)
	"$@"
	;;
esac
