#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# The specified sender domain to check DNS records for.
sender_domain="$1"

# Get our Cloudflare zone information.
zone_json="$(cf zone)"
zone_id="$(printf '%s\n' "$zone_json" | jq -r '.id')"
zone_name="$(printf '%s\n' "$zone_json" | jq -r '.name')"

# A variable for whether our token has direct access to the sender domain.
can_access_dns=

# Check if the sender domain (`$sender_domain`) is under the domain of the zone
# our token has access to (`$zone_name`).
if [[ ".$sender_domain" == *".$zone_name" ]]; then
	can_access_dns=y
fi

# Get our mail server's hostname (e.g. `mail.example.com`).
hostname="$(hostname)"

# The domain name all our DNS records are under which the sender domain should
# reference.
source_domain="$hostname"

# If our source domain name (`$source_domain`) is outside the domain of the zone
# our token has access to (`$zone_name`), correct the source domain name to be
# under our zone.
if [[ ".$source_domain" != *".$zone_name" ]]; then
	source_domain="$source_domain.$zone_name"
fi

# Ensures the sender's DKIM record with the specified DKIM selector is an alias
# of our server's.
_check_dkim() {
	local selector="$1"

	# This is our original DKIM record that the sender domains's DKIM record
	# should point to.
	local source_record_name="$selector._domainkey.$source_domain"

	# The name of the DNS record we're checking.
	local record_name="$selector._domainkey.$sender_domain"

	# If the DKIM DNS record we're checking is already the source record,
	# there's no need to ensure the former is an alias of the latter.
	if [[ "$record_name" == "$source_record_name" ]]; then
		return 0
	fi

	# This variable will hold information for the DNS record we're checking.
	# If no such record exists, this will be empty.
	local record_json=

	# This variable will hold the value of the DNS record we're checking. If
	# no such record exists, this will be empty.
	local cname

	# If we have direct DNS access via the Cloudflare API, get the record
	# information from there since it's the most up-to-date source and
	# provides more information.
	#
	# If we don't have API access, get it using a DNS query.
	if [[ "$can_access_dns" ]]; then
		record_json="$(
			cf api "/zones/$zone_id/dns_records" \
				--url-query "type=CNAME" \
				--url-query "name=$record_name" \
			| jq -c '.result[]'
		)"

		cname="$(printf '%s\n' "$record_json" | jq -r '.content')"
	else
		cname="$(
			cf dns query CNAME "$record_name" \
			| jq -r '.Answer[]?.data'
		)"

		# DNS query answers for CNAME records explicitly include a `.`
		# at the end. The Cloudflare API always omits the trailing `.`,
		# so trim it off here to be consistent with that.
		cname="${cname%.}"
	fi

	# This will be the value the sender domain's DKIM record should have.
	local correct_cname="$source_record_name"

	# Ensure the DKIM record is set correctly.
	require_dns_record DKIM CNAME "$record_name" \
		"$cname" "$correct_cname" \
		"$record_json"
}

# Ensures the sender's SPF record includes our server's.
_check_spf() {
	# This is our original SPF record that sender's SPF record should
	# include. The name of this record is chosen in our `check_dns` script,
	# where the record is originally created.
	local source_record_name="$hostname"

	# The name of the DNS record we're checking.
	local record_name="$sender_domain"

	# If the SPF DNS record we're checking is already the source record,
	# there's no need to ensure the former includes the latter.
	if [[ "$record_name" == "$source_record_name" ]]; then
		return 0
	fi

	# Fetch the information for the SPF record we're checking. If no such
	# record exists, this will be empty.
	local record_json
	record_json="$(get_spf_record "$record_name")"

	# Get the SPF record's content. If no such record exists, this will be
	# empty.
	local spf_data
	spf_data="$(printf '%s\n' "$record_json" | jq -r '.content')"

	# This will be the value the sender domain's SPF record should have.
	# Start with its existing SPF record value so its preexisting policies
	# (e.g. allowing other mail servers to send for the domain) aren't lost.
	# If there is no existing SPF record, default to an empty SPF policy.
	local correct_spf_data="${spf_data:-v=spf1}"

	# Remove any preexisting `all` term from the policy, and add the correct
	# one. There should be an `all` term with the `-` (fail) qualifier so
	# all servers not explicitly covered by the policy are disallowed from
	# sending for the domain. Only authorized senders should be allowed.
	#
	# RFC 7208 (section 4.6.2) lists all SPF qualifiers.
	correct_spf_data="$(
		printf '%s\n' "$correct_spf_data" | sed -E 's/ [+-?~]?all$//gi'
	) -all"

	# An SPF term that includes our server's own SPF policy into another
	# domain's SPF policy.
	local include="include:$source_record_name"

	# If the sender domain's SPF policy doesn't include our server's own SPF
	# policy, include it so we're allowed to send mail for that domain.
	if ! printf '%s\n' "$correct_spf_data" | grep -Fiq " $include "; then
		# Insert our `include:` term after the `v=spf1` (starting at
		# index 0, ending 6 characters later) and before the rest of the
		# terms (starting at index 6).
		correct_spf_data="${correct_spf_data:0:6} $include${correct_spf_data:6}"
	fi

	# Ensure the SPF record is set correctly.
	require_dns_record SPF TXT "$record_name" \
		"$spf_data" "$correct_spf_data" \
		"$record_json"
}

# Exits the script with an error when multiple records are passed in. Otherwise,
# does nothing and allows the script to continue.
_forbid_multiple_dmarc_records() {
	local records="$1"

	if [[ "$records" == *$'\n'* ]]; then
		printf '%s\n' "ERROR: Multiple TXT DNS records starting with 'v=DMARC1;' found at '$record_name', which is not allowed." >&2
		exit 1
	fi
}

# Ensures the sender's DMARC record is set up correctly.
_check_dmarc() {
	# The name of the DMARC record we're checking.
	local record_name="_dmarc.$sender_domain"

	# This variable will hold information for the DMARC record we're
	# checking. If no such record exists or we can't access the full record
	# information, this will be empty.
	local record_json=

	# This variable will hold the value of the DMARC record we're checking.
	# If no such record exists, this will be empty.
	local dmarc_data

	# A regex pattern that matches a DMARC version tag (and the required
	# semicolon following it) according to RFC 7489 (section 6.4).
	local v_tag_pattern=$'^[Vv][ \t]*=[ \t]*DMARC1[ \t]*;'

	# If we have direct DNS access via the Cloudflare API, get the record
	# information from there since it's the most up-to-date source and
	# provides more information.
	#
	# If we don't have API access, get it using a DNS query.
	if [[ "$can_access_dns" ]]; then
		# To get the DMARC records, fetch all TXT records at the DMARC
		# record name, and filter for only the records with the correct
		# DMARC version.
		record_json="$(
			cf api "/zones/$zone_id/dns_records" \
				--url-query "type=TXT" \
				--url-query "name=$record_name" \
			| jq -c '
				.result[]
				| select(.content | test("'"$v_tag_pattern"'"))
			'
		)"

		_forbid_multiple_dmarc_records "$record_json"

		# Extract the record's content to get the DMARC data.
		dmarc_data="$(printf '%s\n' "$record_json" | jq -r '.content')"
	else
		# To get the DMARC values, fetch all TXT record values at the
		# DMARC record name, remove quotes since quotes are allowed
		# around parts of a TXT record answer's data, and filter for
		# only the records with the correct DMARC version.
		#
		# This is all done in `jq` because otherwise a multi-line string
		# is ambiguous with multiple single-line strings, since TXT
		# record data can have multiple lines. Note this outputs the
		# data as JSON strings (escaped and quoted), not raw strings;
		# see next comment for why.
		dmarc_data="$(
			cf dns query TXT "$record_name" \
			| jq -c '
				.Answer[]?.data
				| gsub("\""; "")
				| select(test("'"$v_tag_pattern"'"))
			'
		)"

		# Exit with an error if there are multiple DMARC records. This
		# detects multiple records by checking for multiple lines, so to
		# prevent false positives, any line breaks in the DMARC data
		# itself must be escaped when outputted above.
		_forbid_multiple_dmarc_records "$dmarc_data"

		# Since `$dmarc_data` is still a JSON-encoded string, decode it
		# here so it can be used normally as a raw string from now on.
		dmarc_data="$(printf '%s\n' "$dmarc_data" | jq -r)"
	fi

	# This will be the value the sender domain's DMARC record should have.
	local correct_dmarc_data

	# Check if there's an existing DMARC record.
	if [[ "$dmarc_data" ]]; then
		# Use the current value as a base for the new value so the
		# existing DMARC configuration isn't lost.
		correct_dmarc_data="$dmarc_data"
	else
		# Since there's no existing DMARC record, start with an empty
		# DMARC value.
		correct_dmarc_data="v=DMARC1;"
	fi

	# Replace any line breaks in the DMARC data with spaces since line
	# breaks aren't allowed in a DMARC record, and otherwise extra care
	# would have to be taken to support them in later operations.
	correct_dmarc_data="${correct_dmarc_data//$'\n'/ }"

	# All the tags in the DMARC record other than `v` and `p` can be
	# preserved, so obtain them via the following steps, using the current
	# correct DMARC data as a base.
	# * Remove the existing `v` tag.
	# * Remove any existing `p` tags.
	# * If there's a semicolon remaining at the start, delete it. Note that
	#   any whitespace following the semicolon is preserved.
	local non_v_and_p_tags
	non_v_and_p_tags="$(
		printf '%s\n' "$correct_dmarc_data" \
		| sed -E '
			s/'"$v_tag_pattern"$'//
			s/(^|;)[ \t]*[Pp][ \t]*=[^;]*//g
			s/^;//
		'
	)"

	# Ensure the `p` tag immediately follows the `v` tag as required by RFC
	# 7489 (section 6.4), and ensure it's set to `reject` so unauthorized
	# messages can't be sent on behalf of the sender's domain. Normalize
	# formatting (capitalization, spacing, and semicolons) for the `v` and
	# `p` tags to maximize compatibility with other parties (since not
	# everyone obeys the RFC when parsing DMARC records).
	correct_dmarc_data="v=DMARC1; p=reject;$non_v_and_p_tags"

	# Ensure the DMARC record is set correctly.
	require_dns_record DMARC TXT "$record_name" \
		"$dmarc_data" "$correct_dmarc_data" \
		"$record_json"
}

# Ensure the sender's domain points to both of our DKIM keys.
_check_dkim a
_check_dkim b

# Ensure the sender's domain points to our SPF policy.
_check_spf

# Ensure the sender's domain has DMARC set up correctly.
_check_dmarc
