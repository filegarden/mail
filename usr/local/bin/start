#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# By default, use maximally restrictive permissions for new files created by
# this container.
umask 0077

# A function that should be called when our `setup` script fails.
_handle_setup_error() {
	# Save the `setup` script's exit status.
	local status="$?"

	# Wait this duration before letting the server restart. Restarting too
	# quickly wastes CPU and can cause APIs being called to rate limit us.
	local failure_sleep_seconds=10

	printf '%s\n' "Setup failed with exit status $status. Exiting in $failure_sleep_seconds seconds..." >&2

	sleep "$failure_sleep_seconds"

	# Exit with the same status our `setup` script failed with.
	exit "$status"
}

# Run our setup script. If it fails, call `_handle_setup_error`.
setup || _handle_setup_error

# Run everything needed for our mail server in parallel, replacing this script's
# shell process (using `exec`) since the shell is no longer needed.
# * If one of the below processes exits, also halt the others so the container
#   can restart.
# * Ensure different lines logged at the same time don't intermingle.
# * Don't limit the number of simultaneous commands to one per CPU thread. All
#   these commands must run unconditionally.
# * Run these commands simultaneously, and in the foreground so `parallel` can
#   detect when they exit and stay open as long as they're open. Running these
#   in the foreground also makes their output appear in the container's output.
#   * `syslogd` is what handles system logs. `-n` runs it in the foreground, and
#     `-O /dev/stdout` tells it to output all logs to the container's output.
#   * The `crond` command runs `cron`, which is for scheduling automatic jobs.
#     We use it to schedule TLS certificate renewal.
#   * Run our `usr/local/bin/deploy_tls` script in `listen` mode. Whenever our
#     TLS certificates update, this gives Postfix the updated files and reloads
#     Postfix.
#   * Run our `usr/local/bin/deploy_dkim` script in `listen` mode. Whenever our
#     DKIM keys update, this gives OpenDKIM the updated files and reloads
#     OpenDKIM.
#   * The other programs listed here are described in our `Dockerfile`.
exec parallel \
	--halt now,done=1 \
	--line-buffer \
	--jobs 0 \
	::: \
	"syslogd -n -O /dev/stdout" \
	"crond -f" \
	"deploy_tls listen" \
	"deploy_dkim listen" \
	"postfix start-fg" \
	"dovecot -F" \
	"opendkim -f"
