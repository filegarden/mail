#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# Exits with an error if this script isn't running with root privileges.
_require_root() {
	# Get the effective user ID.
	local euid
	euid="$(id -u)"

	# Check if the effective user ID is not 0 (the root user ID).
	if [[ "$euid" != "0" ]]; then
		printf '%s\n' "Root user privileges required." >&2
		exit 1
	fi
}

# Reloads OpenDKIM.
_reload_opendkim() {
	# Get OpenDKIM's process ID and then its main child process's ID.
	opendkim_pid="$(cat /run/opendkim.pid)"
	opendkim_child_pid="$(pgrep -P "$opendkim_pid")"

	# Kill the child process so OpenDKIM restarts it. (Don't worry; this
	# allows it to exit cleanly.)
	kill -- "$opendkim_child_pid"
}

# Deploys our DKIM key files to the location OpenDKIM reads them from. This
# requires root privileges because OpenDKIM outputs security warnings if any
# user but `opendkim` can access these files (even though they're initially
# written by `dkim`, a different user, before being deployed).
files() {
	_require_root

	# Set the path where our `home/dkim/bin/rotate` script outputs our
	# private keys.
	source_path=/home/dkim/keys

	# Set the path where OpenDKIM looks for private key files, as set in the
	# `KeyFile` option from `etc/opendkim/opendkim.conf`.
	target_path=/var/db/dkim

	# Get the name of an arbitrary key created fewer than 30 days ago. If no
	# such key exists, this will be empty. If it does exist, it's most
	# likely the active key.
	active_key="$(
		find "$source_path" -mindepth 1 -maxdepth 1 -mtime -30 \
			-exec basename -s .pem -- {} \; -quit
	)"

	# Check if there's a newer key we can use as the active key instead,
	# just in case. The active key must be the newest.
	if [[ "$active_key" ]]; then
		newer_key="$(
			find "$source_path" -mindepth 1 -maxdepth 1 \
				-newer "$source_path/$active_key.pem" \
				-exec basename -s .pem -- {} \; -quit
		)"

		if [[ "$newer_key" ]]; then
			active_key="$newer_key"
		fi
	fi

	# Copy the contents of the active key file to OpenDKIM's directory.
	cat -- "$source_path/$active_key.pem" > "$target_path/$active_key.pem"

	# Tell OpenDKIM this active key is the key it should use. The below `*`
	# means to use the key to sign messages from all domains. We configured
	# Postfix to only give OpenDKIM messages from trusted senders, so this
	# is fine.
	printf '%s\n' "* $active_key" > /etc/opendkim/SigningTable

	# Let OpenDKIM read the files we wrote above.
	chmod -- g=r "$target_path/$active_key.pem" /etc/opendkim/SigningTable
	chgrp -- opendkim "$target_path/$active_key.pem" \
		/etc/opendkim/SigningTable
}

# Listens for calls to the `notify` function in order to deploy updated DKIM
# keys. This requires root privileges.
listen() {
	_require_root

	# Create the named pipe we'll use to let the `notify` function
	# communicate with this function.
	mkfifo -m 0620 /run/deploy_dkim.fifo

	# Give the unprivileged `dkim` user permission to call `notify` and
	# deploy our DKIM keys.
	chgrp dkim /run/deploy_dkim.fifo

	# Repeatedly do the following forever.
	while true; do
		# Open the below named pipe for reading. This script is blocked
		# and cannot continue until `notify` opens and closes the pipe
		# for writing. We don't care about any data written to the pipe,
		# only that it's opened, so discard any data that comes through.
		cat /run/deploy_dkim.fifo > /dev/null

		# Give the updated DKIM files to OpenDKIM.
		deploy_dkim files

		# Reload OpenDKIM so it can use the updated files.
		_reload_opendkim
	done
}

# Notifies the `listen` function to deploy our DKIM keys, since they've been
# updated. This can't deploy updated keys directly because doing so requires
# root privileges, and this should be ran by an unprivileged user.
notify() {
	# Check if the `listen` function is running yet by checking if the named
	# pipe it creates exists.
	if [[ -e /run/deploy_dkim.fifo ]]; then
		# Open and close the pipe for writing, unblocking the `listen`
		# function.
		printf '' > /run/deploy_dkim.fifo
	fi
}

case "$1" in
files | listen | notify)
	"$@"
	;;
*)
	exit 1
	;;
esac
