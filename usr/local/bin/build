#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# By default, don't let unprivileged users access files created by this script.
umask 0077

# Disallow unprivileged users from accessing our Docker secrets, as Docker
# doesn't restrict permissions for secrets by default. Permissions on secret
# files can't be modified directly since they're mounted as read-only, so this
# modifies permissions on the secrets directory instead. But we have to create
# it first since it normally doesn't exist while building the Docker image.
mkdir -p /run/secrets
chmod go= /run/secrets

# Create the directory our `usr/local/bin/load_env` script will write our `.env`
# variables to.
mkdir -p /run/.env

# Let anyone access the directory (but not necessarily the files inside).
chmod a+rx /run/.env

# Give users with access to our Cloudflare API token permission to use our
# Cloudflare API script.
chmod g=rx /usr/local/bin/cf
chgrp cf-api-token /usr/local/bin/cf

# Build the default `/etc/postfix/aliases` file so Postfix doesn't output an
# error the first time it tries to open `/etc/postfix/aliases.lmdb`.
newaliases

# Create our password database.
mkdir -p /etc/auth
touch /etc/auth/passwd

# Give Dovecot permission to read the password database.
chmod -R g=r /etc/auth
chmod g+x /etc/auth
chgrp -R dovecot /etc/auth

# Create the Postfix TLS chain file directory.
mkdir -p /etc/postfix/smtpd_tls_chain_files

# Download `dehydrated`.
dehydrated_url=https://raw.githubusercontent.com/dehydrated-io/dehydrated/master/dehydrated
wget -O /usr/local/bin/dehydrated -- "$dehydrated_url"

# Let the `acme` user run `dehydrated`.
chmod g=rx /usr/local/bin/dehydrated
chgrp acme /usr/local/bin/dehydrated

# Create `dehydrated`'s base directory, and give the `acme` user access.
mkdir -p /home/acme/dehydrated
chown acme:acme /home/acme/dehydrated

# Create a directory our DKIM key generation script can output private keys to.
mkdir -p /home/dkim/keys
chown dkim:dkim /home/dkim/keys

# Let the `acme` user run our script to deploy updated TLS files.
chmod g=rx /usr/local/bin/deploy_tls
chgrp acme /usr/local/bin/deploy_tls

# Let the `dkim` user run our script to deploy updated DKIM files.
chmod g=rx /usr/local/bin/deploy_dkim
chgrp dkim /usr/local/bin/deploy_dkim

# Let anyone access our `jq` utilities.
chmod a+x /usr/lib/jq

# Create a `cron` job to automatically run our `daily` script every 24 hours.
# Generate a random hour number (0-23) and minute number (0-59) as the time of
# day to run the script. Since the script can renew our TLS certificates, it's
# best to randomize the time of day to reduce load on Let's Encrypt due to the
# massive number of servers renewing at midnight or a precise hour.
#
# Note that `cron` jobs can't run unless `crond` is running. Our `start` script
# runs `crond`.
random_hour="$(shuf -i 0-23 -n 1)"
random_minute="$(shuf -i 0-59 -n 1)"
printf '%s\n' "$random_minute $random_hour * * * /usr/local/bin/daily" \
| crontab -

# Delete this script. It only needs to exist during the Docker image build.
rm -f -- "$0"
