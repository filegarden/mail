#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# Build our `etc/postfix/aliases` file so Postfix can use it.
newaliases

# Create an initial password database for Dovecot.
mkdir -p /etc/auth
touch /etc/auth/passwd

# Only let Dovecot access the password database.
chmod -R 0700 /etc/auth
chown -R dovecot:dovecot /etc/auth

# Create Postfix's TLS chain files, and give `acme.sh` only the bare minimum
# access needed to output to them. (Postfix logs warnings if anyone but `root`
# has any access, but the alternative is making a `setuid` `root` program only
# `acme.sh` can execute, just to create the same effect anyway. There's no
# reason for that, and in fact that would increase our attack surface.)
postfix_tls_path=/etc/postfix/smtpd_tls_chain_files
mkdir -p "$postfix_tls_path"
touch "$postfix_tls_path/key.pem" "$postfix_tls_path/cert.pem"
chmod -R 0660 "$postfix_tls_path"
chmod 0750 "$postfix_tls_path"
chown -R root:acme-sh "$postfix_tls_path"

# Run our build script for `acme.sh` as an unprivileged user.
su acme-sh -s /bin/sh -c /home/acme-sh/bin/build

# Only let OpenDKIM access our private keys.
chmod 0700 /var/db/dkim
chown opendkim:opendkim /var/db/dkim

# Delete this script. It only needs to exist during the Docker image build.
rm "$0"
