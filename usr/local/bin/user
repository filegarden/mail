#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# By default, don't let unprivileged users access files created by this script.
umask 0077

reset="$(printf '\e[0m')"
gray="$(printf '\e[90m')"
lblue="$(printf '\e[1;34m')"

# The address specified in this command's arguments.
address="$1"

# Check if the specified address doesn't already contain "@".
if [[ "$address" != *"@"* ]]; then
	# Get our mail server's default domain (e.g. `example.com`).
	domain="$(postconf -hx mydomain)"

	# Automatically append the "@" followed by our domain.
	address="$address@$domain"
fi

# Our Dovecot password database path (from `etc/dovecot/conf.d/10-auth.conf`).
passdb=/etc/auth/passwd

# Use a temporary file for writing to the password database to prevent
# corrupting the original in case of a system failure.
temp_passdb="$(mktemp -u)"

# If the specified address is already in the database, remove it. If `grep`
# returns an error due to finding no matches, instead do nothing.
grep -Fvx -- "$address" "$passdb" || : > "$temp_passdb"

# Randomly generate a cryptographically secure password in Base64. We generate
# 192 bytes because that encodes into 256 Base64 characters, which is as close
# as Base64 can get to 255, the maximum SASL password length as per RFC 4616
# (section 2). Then cut the password off at that maximum length.
password="$(openssl rand 192 | openssl base64 -A | cut -c -255)"

# Hash the password using Argon2.
password_hash="$(doveadm pw -s ARGON2ID -p "$password")"

# Append the new user entry to the database.
printf '%s\n' "$address:$password_hash" >> "$temp_passdb"

# Save the database.
mv -f -- "$temp_passdb" "$passdb"

# Get our mail server's hostname (e.g. `mail.example.com`).
hostname="$(hostname)"

printf '%s' "\
Log into your mail server using these SASL credentials.

${gray}For how to sign into your mail server using these credentials, see:
https://github.com/filegarden/mail/blob/main/README.md${reset}

Hostname: ${lblue}${hostname}${reset}

Login Name: ${lblue}${address}${reset}

Password:
${lblue}" 1>&2

# The password is the only part of the output without `1>&2`, so that it prints
# to `stdout` instead of `stderr`. That way, automated tools can easily
# distinguish and extract it from the otherwise human-friendly output.
printf '%s' "$password"

printf '%s' "${reset}
" 1>&2
