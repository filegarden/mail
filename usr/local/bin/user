#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

# By default, don't let unprivileged users access files created by this script.
umask 0077

# Load variables defined in our `.env` file into the `/run/.env` directory so
# the variables can be used.
load_env

reset="$(printf '\e[0m')"
gray="$(printf '\e[90m')"
lblue="$(printf '\e[1;34m')"

# Our Dovecot password database path (from `etc/dovecot/conf.d/10-auth.conf`).
passdb=/etc/auth/passwd

# Locks the password database. If another running instance of this script
# already has a lock on the database, this exits with an error to prevent lost
# writes due to each instance trying to save a different version of the
# database.
_lock_passdb() {
	# If the lock file is active, this will contain its path. Otherwise,
	# this will be empty.
	local active_lock=

	# If the lock file exists, set `active_lock` to its path only if it was
	# updated in the last 5 minutes, since otherwise a crash likely
	# prevented it from ever being removed.
	if [[ -e "$passdb.lock" ]]; then
		active_lock="$(find "$passdb.lock" -maxdepth 0 -mmin -5)"
	fi

	# If there's an active lock, exit with an error.
	if [[ "$active_lock" ]]; then
		printf '%s\n' "ERROR: Another process is currently writing to the password database. Wait for it to complete and try again." >&2
		exit 1
	fi

	# If this script exits, unlock the database. Note this can't catch
	# crashes.
	trap 'TRAP=y _unlock_passdb' EXIT HUP INT QUIT TERM

	# Create or update the lock file.
	touch -- "$passdb.lock"
}

# Unlocks the password database so other instances of this script can write to
# it.
_unlock_passdb() {
	# Delete the lock file created by `_lock_passdb`.
	rm -f -- "$passdb.lock"

	# Remove the `trap` set by `_lock_passdb`.
	trap - EXIT HUP INT QUIT TERM

	# If this function was called by `_lock_passdb`'s exit `trap`, let the
	# script continue exiting.
	if [[ "${TRAP-}" ]]; then
		exit
	fi
}

# Saves the file at the specified path as the new password database and unlocks
# the database.
_save_passdb() {
	local temp_passdb="$1"

	# Copy the current database file's permissions to the new database file.
	local passdb_mod passdb_own
	passdb_mod="$(stat -c '%a' -- "$passdb")"
	passdb_own="$(stat -c '%u:%g' -- "$passdb")"
	chmod -- "$passdb_mod" "$temp_passdb"
	chown -- "$passdb_own" "$temp_passdb"

	# Save the database.
	mv -f -- "$temp_passdb" "$passdb"

	# Unlock the database.
	_unlock_passdb
}

# Adds an address to the password database and generates a crytographically
# secure pseudorandom password for it, printing the new password. Exits with an
# error if the specified address is already in the database.
add() {
	local address="$1"

	# Ensure the address is only one line long. (The later `grep` check
	# can't cover this.)
	if [[ "$address" == *$'\n'* ]]; then
		printf '%s\n' "ERROR: An address must contain only one line." >&2
		exit 1
	fi

	# Normalize the address to lowercase.
	address="$(printf '%s\n' "$address" | tr '[:upper:]' '[:lower:]')"

	# Ensure the address doesn't already exist before adding it.
	if user exists "$address"; then
		printf '%s\n' "ERROR: Address '$address' already exists in database." >&2
		exit 1
	fi

	# Check if the specified address is invalid. The below regex is from
	# https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
	if printf '%s\n' "$address" \
	| grep -Eqv '^[a-zA-Z0-9.!#$%&'"'"'*+/=?^_`{|}~-]+@[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'
	then
		printf '%s\n' "ERROR: Invalid address: $address" >&2
		exit 1
	fi

	# Get the domain part of the address (the part after the `@`).
	local domain="${address#*@}"

	# Ensure the domain's DNS records allow our mail server to send as this
	# address.
	check_sender_dns "$domain"

	# Generate a cryptographically secure pseudorandom password in Base64.
	# We generate 192 bytes because that encodes into 256 Base64 characters,
	# which is as close as Base64 can get to 255, the maximum SASL password
	# length as per RFC 4616 (section 2). Then cut the password off at that
	# maximum length.
	local password
	password="$(openssl rand 192 | openssl base64 -A)"
	password="${password:0:255}"

	# Hash the password using Argon2.
	local password_hash
	password_hash="$(doveadm pw -s ARGON2ID -p "$password")"

	# Lock the password database file.
	_lock_passdb

	# Use a temporary file for writing to the password database to prevent
	# corrupting the original in case of a failure.
	local temp_passdb
	temp_passdb="$(mktemp -u)"
	cp -- "$passdb" "$temp_passdb"

	# Append the new user entry to the database.
	printf '%s\n' "$address:$password_hash" >> "$temp_passdb"

	# Save and unlock the database.
	_save_passdb "$temp_passdb"

	# Get our mail server's hostname (e.g. `mail.example.com`).
	local hostname
	hostname="$(hostname)"

	cat <<-END
	User created with these credentials:

	SMTP Server: ${lblue}$hostname${reset}

	Username: ${lblue}$address${reset}

	Password:
	${lblue}$password${reset}

	${gray}To learn how to sign into your mail server and send mail, see:
	https://github.com/filegarden/mail/blob/main/README.md#sending-mail${reset}
	END
}

# Removes an address and its password from the password database. Exits with an
# error if the specified address isn't in the database.
remove() {
	local address="$1"

	# Normalize the address to lowercase.
	address="$(printf '%s\n' "$address" | tr '[:upper:]' '[:lower:]')"

	# Ensure the address exists before removing it.
	if ! user exists "$address"; then
		printf '%s\n' "ERROR: Address '$address' not found in database." >&2
		exit 1
	fi

	# Lock the password database file.
	_lock_passdb

	# Use a temporary file for writing to the password database to prevent
	# corrupting the original in case of a failure.
	local temp_passdb
	temp_passdb="$(mktemp -u)"

	# Escape the address so it can be safely used in a regex pattern.
	local escaped_address
	escaped_address="$(printf '%s\n' "$address" | sed 's/[$*./[\^]/\\&/g')"

	# Remove the specified address from the database.
	sed "/^$escaped_address:/d" -- "$passdb" > "$temp_passdb"

	# Save and unlock the password database.
	_save_passdb "$temp_passdb"

	printf '%s\n' "Removed '$address' from database."

	# Get the domain part of the address (the part after the `@`).
	local domain="${address#*@}"

	# If there's still an address in the database with the specified domain,
	# we can stop here.
	#
	# `grep` exits early when it finds a match, so `ignore_sigpipe` is
	# needed.
	if user domains | grep -Fqxe "$domain" || ignore_sigpipe "$?"; then
		return 0
	fi

	# Otherwise, if there's no longer any address with the specified domain,
	# recommend removing any DNS records this mail server no longer requires
	# the removed domain to have.

	# Get our Cloudflare zone information.
	local zone_name
	zone_name="$(cf zone | jq -r '.name')"

	# Get our mail server's hostname (e.g. `mail.example.com`).
	local hostname
	hostname="$(hostname)"

	# The domain name all our DNS records are under which sender domains
	# reference.
	local source_domain="$hostname"

	# If our source domain name (`$source_domain`) is outside the domain of
	# the zone our token has access to (`$zone_name`), correct the source
	# domain name to be under our zone.
	if [[ ".$source_domain" != *".$zone_name" ]]; then
		source_domain="$source_domain.$zone_name"
	fi

	cat <<-END
	Because there's no longer any address with the domain '$domain', this mail server no longer needs the following DNS records:

	END

	# If the domain being removed isn't our source domain and doesn't need
	# the records a source domain requires, those records can be included in
	# the list.
	if [[ "$domain" != "$source_domain" ]]; then
		cat <<-END
		- ${lblue}a._domainkey.$domain${reset}
		- ${lblue}b._domainkey.$domain${reset}
		- ${lblue}$domain${reset} TXT "v=spf1 ..."
		END
	fi

	cat <<-END
	- ${lblue}_dmarc.$domain${reset} TXT "v=DMARC1; ..."

	${gray}Note: The above records may still be required by queued messages that haven't been delivered yet, or by other mail servers using the domain.${reset}
	END
}

# Generates a new crytographically secure pseudorandom password for an address
# in the password database and prints the new password. Exits with an error if
# the specified address isn't in the database.
reset() {
	local address="$1"

	# Remove the existing user from the password database. Hide the removal
	# success message since it doesn't make sense for resetting a password.
	user remove "$address" > /dev/null

	# Now that it's removed, add a new user under the same address. It will
	# get a fresh password.
	user add "$address"
}

# Lists all addresses in the password database, one per line.
list() {
	# Output the `user` part of each `user:password` line from the database
	# file.
	cut -d : -f 1 -- "$passdb"
}

# If an address exists in the password database, exits with status 0. Otherwise,
# exits with status 1.
exists() {
	local address="$1"

	# Check if the address can be found in the user list.
	#
	# `grep` exits early when it finds a match, so `ignore_sigpipe` is
	# needed.
	user list | grep -Fqxe "$address" || ignore_sigpipe "$?"
}

# Lists all the domains of addresses in the password database, one per line.
domains() {
	# For each address in the password database, get the domain part of the
	# address, and dedupe them so each domain is only outputted once.
	user list | cut -d @ -f 2 | sort -u
}

case "$1" in
add | remove | reset | list | exists | domains)
	"$@"
	;;
*)
	printf '%s\n' "Invalid subcommand '$1'."
	exit 1
	;;
esac
