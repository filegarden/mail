#!/bin/sh

# Exit if an error occurs or an unset variable is referenced.
set -eu

reset="$(printf '\e[0m')"
gray="$(printf '\e[90m')"
lblue="$(printf '\e[1;34m')"

# Go to our OpenDKIM private key directory.
cd /etc/opendkim/keys

# A DKIM selector is what identifies which public key in the mail server's DNS
# records to use for verifying an email's signature. To make things simple,
# we'll just always use `default` as our selector (which is a common practice).
selector=default

# Generate a private key using RSA. We use a 2048-bit key because that's the
# largest size that RFC 6376 (section 3.3.3) requires DKIM verifiers to support.
openssl genrsa -out "$selector.pem" 2048

public_key="$(
	# Generate a public key from the private key in binary format.
	openssl rsa -in "$selector.pem" -pubout -outform der 2> /dev/null |
	# Convert it to Base64, the format required in a DKIM DNS record.
	openssl base64 -A
)"

# Only let OpenDKIM access our private key directory.
chown -R opendkim:opendkim .
chmod -R 0700 .

# Get our mail server's hostname (e.g. `mail.example.com`).
hostname="$(hostname)"

# Generate the DKIM DNS record name. Even though most DNS interfaces let users
# omit `.$hostname.`, it can't be omitted if `$hostname` has a subdomain like
# `mail.`, which mail servers usually do. For example, if our hostname is
# `mail.example.com`.
# `y.z`'s record names can only omit the `.y.z` part, so the name must still
# contain at least `$selector._domainkey.x`, not just `$selector._domainkey`.
# This can't easily be determined automatically, so it's simpler and more
# reliable to always print the full record name.
record_name="$selector._domainkey.$hostname."

# Generate the DKIM DNS record data containing the public key.
record_data="v=DKIM1; k=rsa; p=$public_key"

# Display the final instructions for setting up the DKIM DNS record.
printf '%s' "\
${reset}Set the following DNS record for ${lblue}$hostname${reset}.

${gray}If your server needs to handle mail for other domains, also see:
https://github.com/filegarden/mail/blob/main/README.md${reset}

Type: ${lblue}TXT${reset}

Name: ${lblue}$record_name${reset}

Recommended TTL: ${lblue}1 day (86400 seconds)${reset}

Data:
${lblue}" 1>&2

# The record data is the only part of the output without `1>&2`, so that it
# prints to `stdout` instead of `stderr`. That way, automated tools can easily
# distinguish and extract it from the otherwise human-friendly output.
printf '%s' "$record_data"

printf '%s' "${reset}
" 1>&2
