#!/bin/busybox sh

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

reset="$(printf '\e[0m')"
gray="$(printf '\e[90m')"
lblue="$(printf '\e[1;34m')"

# Go to our OpenDKIM private key directory.
cd /var/db/dkim

# A DKIM selector is what identifies which public key in the mail server's DNS
# records to use for verifying an email's signature. To make things simple,
# we'll just always use `default` as our selector (which is a common practice).
selector=default

# Use a private key path based on the (above) selector.
private_key_path="./$selector.private"

# Create our private key file, so we can restrict its permissions before the
# private key is ever written to it.
touch "$private_key_path"

# Only let OpenDKIM access our private keys.
chown -R opendkim:opendkim .
chmod -R 0600 .
chmod 0700 .

if ! [ -e "$private_key_path" ]; then
	# Generate a private key using RSA. We use a 2048-bit key because that's
	# the largest size that RFC 6376 (section 3.3.3) requires DKIM verifiers
	# to support.
	openssl genrsa -out "$private_key_path" 2048
fi

public_key="$(
	# Generate a public key from the private key in binary format.
	openssl rsa -in "$private_key_path" -pubout -outform der 2> /dev/null |
	# Convert it to Base64, the format required in a DKIM DNS record.
	openssl base64 -A
)"

# Get our mail server's hostname (e.g. `mail.example.com`).
hostname="$(hostname)"

# Generate the DKIM DNS record name. Even though most DNS interfaces let users
# omit `.$hostname.`, a subdomain in `$hostname` still can't be omitted. For
# example, if our hostname is `mail.example.com`, omitting the domain from this
# name results in `$selector._domainkey.mail`, not just `$selector._domainkey`.
# Since part of the hostname must be included, it's simpler and more reliable to
# just include the whole thing.
record_name="$selector._domainkey.$hostname."

# Generate the DKIM DNS record data containing the public key.
record_data="v=DKIM1; k=rsa; p=$public_key"

# Display the final instructions for setting up the DKIM DNS record.
printf '%s' "\
Set the following DNS record for ${lblue}$hostname${reset}.

${gray}If your server needs to handle mail for other domains, also see:
https://github.com/filegarden/mail/blob/main/README.md${reset}

Type: ${lblue}TXT${reset}

Name: ${lblue}$record_name${reset}

Recommended TTL: ${lblue}1 day (86400 seconds)${reset}

Data:
${lblue}" 1>&2

# The record data is the only part of the output without `1>&2`, so that it
# prints to `stdout` instead of `stderr`. That way, automated tools can easily
# distinguish and extract it from the otherwise human-friendly output.
printf '%s' "$record_data"

printf '%s' "${reset}
" 1>&2
