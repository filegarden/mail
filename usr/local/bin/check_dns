#!/bin/busybox sh
# Ensures a number of DNS records are set that our mail server relies on.

# Exit if an error occurs or an unset variable is referenced.
set -euo pipefail

reset="$(printf '\e[0m')"
gray="$(printf '\e[90m')"
lblue="$(printf '\e[1;34m')"

# Obtain this server's public IP addresses to use in our A, AAAA, and SPF DNS
# records. If either request fails, do nothing instead of exiting, because it's
# expected that some networks don't support both IPv4 and IPv6.
ipv4="$(curl -s --ipv4 https://icanhazip.com/ || :)"
ipv6="$(curl -s --ipv6 https://icanhazip.com/ || :)"

# If no IPs are found, something is wrong.
if [[ ! "$ipv4$ipv6" ]]; then
	printf '%s\n' "ERROR: Could not obtain any public IP address for this server." >&2
	exit 1
fi

# Get our mail server's hostname (e.g. `mail.example.com`).
hostname="$(hostname)"

# Checks our hostname's A or AAAA DNS records.
_check_hostname_a() {
	local record_type="$1"

	# This will be the IP address that should be set in the DNS record.
	local correct_ip

	if [[ "$record_type" == "A" ]]; then
		correct_ip="$ipv4"
	elif [[ "$record_type" == "AAAA" ]]; then
		correct_ip="$ipv6"
	else
		printf '%s\n' "ERROR: Invalid record type '$record_type'. Must be either 'A' or 'AAAA'." >&2
		exit 1
	fi

	# If we don't know our IP address for this record, don't check the
	# record.
	if [[ ! "$correct_ip" ]]; then
		# Note the record could still exist, but we can't tell whether
		# its value is correct since we don't know our IP, so we
		# shouldn't require the record to be absent either. It's
		# possible this server accepts traffic for an IP (via this
		# record) while being unable to use the IP for outbound traffic.
		return 0
	fi

	printf '%s\n' "Checking hostname's $record_type record..."

	# The name of the DNS record we're checking. This is intentionally not
	# ensured to be under the zone we can access because having access to
	# our source A or AAAA record increases our attack surface needlessly.
	local record_name="$hostname"

	# Get our Cloudflare zone information.
	local zone_json zone_id zone_name
	zone_json="$(cf zone)"
	zone_id="$(printf '%s\n' "$zone_json" | jq -r '.id')"
	zone_name="$(printf '%s\n' "$zone_json" | jq -r '.name')"

	# This variable will hold information for the DNS record we're checking.
	# If no such record exists, this will be empty.
	local record_json=

	# This variable will hold the value of the DNS record we're checking. If
	# no such record exists, this will be empty.
	local ip

	# If the record (`$record_name`) is under the domain of the zone our
	# token has access to (`$zone_name`), get the record information from
	# the Cloudflare API since it's the most up-to-date source and provides
	# more information.
	#
	# If we don't have API access, get it using a DNS query.
	if [[ ".$record_name" == *".$zone_name" ]]; then
		record_json="$(
			cf api "/zones/$zone_id/dns_records" \
				--url-query "type=$record_type" \
				--url-query "name=$record_name" \
			| jq -c '.result[]'
		)"

		ip="$(printf '%s\n' "$record_json" | jq -r '.content')"
	else
		ip="$(
			cf dns query "$record_name" "$record_type" \
			| jq -r '.Answer[]?.data'
		)"
	fi

	# Check if there are multiple IP addresses found at the record name.
	if [[ "$ip" == *$'\n'* ]]; then
		cat <<-END >&2
		ERROR: Multiple $record_type DNS records found at '$record_name'. Generally, a hostname should uniquely identify a server, so this is likely a mistake.

		If you use Cloudflare for DNS and only see one $record_type record at '$record_name', ensure its proxy status is set to "DNS Only".

		(If you set multiple records intentionally, note that multiple servers with different hostnames can handle mail for the same domains.)
		END
		exit 1
	fi

	# Ensure the A or AAAA record is set correctly.
	require_dns_record "$record_type" "$record_type" "$record_name" \
		"$ip" "$correct_ip" \
		"$record_json"
}

# Checks our hostname's SPF DNS record.
_check_hostname_spf() {
	printf '%s\n' "Checking SPF..."

	# The DNS record that should have our SPF policy. This is intentionally
	# not ensured to be under the zone we can access because having access
	# to our source SPF record increases our attack surface needlessly.
	local record_name="$hostname"

	# Start generating the value the SPF record should have.
	local correct_spf_data="v=spf1"

	# Add our server's IP addresses to our SPF record as allowed senders.
	if [[ "$ipv4" ]]; then
		correct_spf_data="$correct_spf_data ip4:$ipv4"
	fi
	if [[ "$ipv6" ]]; then
		correct_spf_data="$correct_spf_data ip6:$ipv6"
	fi

	# Disallow all other senders. Only our mail server should be able to
	# send as our mail server.
	#
	# Note that, as per RFC 7208 (section 5.2), this has no effect on other
	# SPF records that `include:` this one, which is good for domains that
	# want to allow multiple mail servers including ours to send as them.
	correct_spf_data="$correct_spf_data -all"

	# Fetch our server's existing SPF record. If none is found, this will be
	# empty.
	local record_json
	record_json="$(get_txt_record_by_format SPF "$record_name")"

	# Get the SPF record's content. If the record isn't found, this will be
	# empty.
	local spf_data
	spf_data="$(printf '%s\n' "$record_json" | jq -r '.content')"

	# Ensure the SPF record is set correctly.
	require_dns_record SPF TXT "$record_name" \
		"$spf_data" "$correct_spf_data" \
		"$record_json"
}

# Checks the PTR record at the specified name.
_check_host_ptr() {
	local ip_format="$1"

	# The IP address for the specified format.
	local ip

	if [[ "$ip_format" == "IPv4" ]]; then
		ip="$ipv4"
	elif [[ "$ip_format" == "IPv6" ]]; then
		ip="$ipv6"
	else
		printf '%s\n' "Invalid IP address format '$ip_format'. Must be either 'IPv4' or 'IPv6'."
		exit 1
	fi

	# If we don't know our IP address for this record, we can't determine
	# the name of the record to check.
	if [[ ! "$ip" ]]; then
		return 0
	fi

	printf '%s\n' "Checking $ip_format PTR..."

	# The PTR record name.
	local record_name

	# Construct the PTR record name based on the IP address.
	if [[ "$ip_format" == "IPv4" ]]; then
		# IPv4 PTR record names are specified by RFC 1035 (section 3.5).

		# Replace all `.`s in the address with line breaks, and reverse
		# the lines.
		record_name="$(printf '%s\n' "${ipv4//./$'\n'}" | tac)"

		# Restore the `.`s and append `.in-addr.arpa`.
		record_name="${record_name//$'\n'/.}.in-addr.arpa"
	elif [[ "$ip_format" == "IPv6" ]]; then
		# IPv6 addresses are specified by RFC 2373 (section 2.2). IPv6
		# PTR record names are specified by RFC 3596 (section 2.5).

		# Start with the address as a base for the record name, but add
		# enough leading zeros to each field in the address so that each
		# field is exactly 4 hexadecimal digits long.
		local expanded_ip
		expanded_ip="$(
			printf '%s\n' "$ipv6" \
			| sed -E 's/[0-9a-f]+/000&/gi; s/0+([0-9a-f]{4})/\1/gi'
		)"

		# If the address contains `::`, expand it into zeros.
		if [[ "$expanded_ip" == *"::"* ]]; then
			# The part of the address before the `::`.
			local ip_start="${expanded_ip/::*/}"
			# The part of the address after the `::`.
			local ip_end="${expanded_ip/*::/}"

			# Start with an IPv6 address of all zeros.
			local zeros="0000:0000:0000:0000:0000:0000:0000:0000"

			# Slice out just the zeros that should replace the `::`.
			zeros="${zeros:"${#ip_start}"}"
			if [[ "$ip_end" ]]; then
				zeros="${zeros:0:-"${#ip_end}"}"
			fi

			# Join together the part before the `::`, the zeros
			# replacing the `::`, and the part after the `::` to get
			# the final expanded IPv6 address.
			expanded_ip="$ip_start$zeros$ip_end"
		fi

		# Remove the colons, separate each hexadecimal digit with a `.`,
		# reverse it, and append `.ip6.arpa` to get the final PTR record
		# name.
		record_name="$(
			printf '%s\n' "$expanded_ip" \
			| sed 's/://g; s/./.&/g; s/^\.//' \
			| rev
		).ip6.arpa"
	fi

	# Get the PTR record's content. If no record is found, this will be
	# empty.
	local record_content
	record_content="$(
		cf dns query "$record_name" PTR | jq -r '.Answer[]?.data'
	)"

	# Check if the PTR record (if it exists) doesn't point to our hostname.
	if [[ "$record_content" != "$hostname." ]]; then
		cat <<-END >&2
		ERROR: The following PTR record must be set:

		$ip_format Address: ${lblue}$ip${reset}

		Hostname: ${lblue}$hostname${reset}

		${gray}PTR records can't be found in your domain's DNS zone; they're set by your server's host. Look up how to set a PTR record for your hosting provider.${reset}
		END
		exit 1
	fi
}

# Checks the DNS records for all the domains of the addresses in our password
# database to ensure we're allowed to send as them.
_check_sender_domains() {
	user domains \
	| while read -r sender_domain; do
		printf '%s\n' "Checking DNS for sender domain '$sender_domain'..."

		check_sender_dns "$sender_domain"
	done
}

_check_hostname_a A
_check_hostname_a AAAA

_check_hostname_spf

_check_host_ptr IPv4
_check_host_ptr IPv6

_check_sender_domains
